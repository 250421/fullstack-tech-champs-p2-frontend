/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as publicPublicImport } from './routes/(public)/_public'
import { Route as publicPublicRegisterImport } from './routes/(public)/_public.register'
import { Route as publicPublicLoginImport } from './routes/(public)/_public.login'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicPublicRoute = publicPublicImport.update({
  id: '/_public',
  getParentRoute: () => publicRoute,
} as any)

const publicPublicRegisterRoute = publicPublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicPublicRoute,
} as any)

const publicPublicLoginRoute = publicPublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicPublicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_public': {
      id: '/(public)/_public'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicPublicImport
      parentRoute: typeof publicRoute
    }
    '/(public)/_public/login': {
      id: '/(public)/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicPublicLoginImport
      parentRoute: typeof publicPublicImport
    }
    '/(public)/_public/register': {
      id: '/(public)/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicPublicRegisterImport
      parentRoute: typeof publicPublicImport
    }
  }
}

// Create and export the route tree

interface publicPublicRouteChildren {
  publicPublicLoginRoute: typeof publicPublicLoginRoute
  publicPublicRegisterRoute: typeof publicPublicRegisterRoute
}

const publicPublicRouteChildren: publicPublicRouteChildren = {
  publicPublicLoginRoute: publicPublicLoginRoute,
  publicPublicRegisterRoute: publicPublicRegisterRoute,
}

const publicPublicRouteWithChildren = publicPublicRoute._addFileChildren(
  publicPublicRouteChildren,
)

interface publicRouteChildren {
  publicPublicRoute: typeof publicPublicRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicPublicRoute: publicPublicRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof publicPublicRouteWithChildren
  '/login': typeof publicPublicLoginRoute
  '/register': typeof publicPublicRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof publicPublicRouteWithChildren
  '/login': typeof publicPublicLoginRoute
  '/register': typeof publicPublicRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_public': typeof publicPublicRouteWithChildren
  '/(public)/_public/login': typeof publicPublicLoginRoute
  '/(public)/_public/register': typeof publicPublicRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register'
  id:
    | '__root__'
    | '/'
    | '/(public)'
    | '/(public)/_public'
    | '/(public)/_public/login'
    | '/(public)/_public/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  publicRoute: typeof publicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  publicRoute: publicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(public)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_public"
      ]
    },
    "/(public)/_public": {
      "filePath": "(public)/_public.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_public/login",
        "/(public)/_public/register"
      ]
    },
    "/(public)/_public/login": {
      "filePath": "(public)/_public.login.tsx",
      "parent": "/(public)/_public"
    },
    "/(public)/_public/register": {
      "filePath": "(public)/_public.register.tsx",
      "parent": "/(public)/_public"
    }
  }
}
ROUTE_MANIFEST_END */
